#OOPR-Assgn-29
from abc import abstractmethod, ABCMeta


class Customer(metaclass=ABCMeta):
    def __init__(self,customer_name):
        self.__customer_name=customer_name
        self.bill_amount=None
        self.bill_id=None

    def get_customer_name(self):
        return self.__customer_name
    @abstractmethod
    def calculate_bill_amount(self):
        pass
    
class OccasionalCustomer(Customer):
    __counter=1000
    def __init__(self,customer_name,distance_in_kms):
        self.__distance_in_kms=distance_in_kms
        super().__init__(customer_name)
        OccasionalCustomer.__counter+=1
        self.bill_id="O"+str(OccasionalCustomer.__counter)
        
        
    def get_distance_in_kms(self):
        return self.__distance_in_kms
    
    def validate_distance_in_kms(self):
        if self.__distance_in_kms>=1 and self.__distance_in_kms<=5:
            return True
        else:
            return False
        
    def calculate_bill_amount(self):
        if self.validate_distance_in_kms():
            if self.bill_id[0]=="O":
                tiffin_cost=50*1
                if self.__distance_in_kms>=1 and self.__distance_in_kms<=2:
                    tiffin_cost+=self.__distance_in_kms*5
                elif self.__distance_in_kms>2 and self.__distance_in_kms<=5:
                    tiffin_cost+=self.__distance_in_kms*7.5
                self.bill_amount = tiffin_cost
                return self.bill_amount
        else:
            return -1
        
class RegularCustomer(Customer):
    __counter=100
    def __init__(self,customer_name,no_of_tiffin):
        super().__init__(customer_name)
        RegularCustomer.__counter+=1
        self.bill_id="R"+str(RegularCustomer.__counter)
        self.__no_of_tiffin=no_of_tiffin
        
    def get_no_of_tiffin(self):
        return self.__no_of_tiffin
    
    def validate_no_of_tiffin(self):
        if self.__no_of_tiffin>=1 and self.__no_of_tiffin<=7:
            return True
        else:
            return False
        
    def calculate_bill_amount(self):     
        if self.validate_no_of_tiffin():
            if self.bill_id[0]=="R":
                cost=self.get_no_of_tiffin()*50*7
                self.bill_amount=cost
                return self.bill_amount
        else:
            return -1
        
        
